# -*- coding: utf-8 -*-
"""Proyek Analisis Data_Maylina.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tw9ALC70ui9cLF_MMnRkl_NPk-6UdxJb

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** [Maylina Nur'aini]
- **Email:** [mc444d5x0679@student.devacademy.id]
- **ID Dicoding:** [mc444d5x0679]

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1 : Apa faktor yang paling mempengaruhi jumlah peminjam sepeda?
- Pertanyaan 2 : Bagaimana pola penggunaan sepeda berdasarkan waktu(hari dalam seminggu, bulan dan musim)?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# Menampilkan dataset
data_df = pd.read_csv(io.BytesIO(uploaded['day (3).csv']))

data_df.head()

"""**Insight:**
- Yang pertama merupakan proses untuk import data yang akan digunakan. Data diambil dari dataset yang telah disediakan, kemudian saya unduh dan simpan di perangkat pribadi.
- Yang kedua merupakan proses untuk menampilkan data yang sudah di import, yaitu menampilkan lima baris pertama dari 'day.csv'.
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# Menampilkan dataset
data_df = pd.read_csv(io.BytesIO(uploaded['hour (3).csv']))

data_df.head()

"""**Insight:**

- Yang pertama merupakan proses untuk import data yang akan digunakan. Data diambil dari dataset yang telah disediakan, kemudian saya unduh dan simpan di perangkat pribadi.
- Yang kedua merupakan proses untuk menampilkan data yang sudah di import, yaitu menampilkan lima baris pertama dari 'hour.csv'.

### Assessing Data
"""

# Melihat informasi tentang dataset
data_df.info()

# Mengecek apakah ada nilai yang hilang
data_df.isnull().sum()

data_df.head()

"""**Insight:**
- Yang pertama merupakan proses untuk melihat tipe data yang digunakan, untuk memastikan data sudah sesuai belum dengan analisis yang akan dilakukan.
- Yang kedua merupakan proses untuk melihat informasi data dan mengecek apakah ada nilai yang hilang. Tujuannya untuk menghindari error, mengidentifikasi data yang hilang.
"""

# Memeriksa duplikasi data
print("Jumlah duplikasi: ", data_df.duplicated().sum())
data_df.describe()

"""**Insight:**

- Merupakan proses untuk memeriksa duplikasi data, data tersebut menunjukkan bahwa tidak ada duplikasi pada data.

### Cleaning Data
"""

# Menghapus semua baris yang memiliki nilai hilang
data_df.dropna(inplace=True)

# Mengecek apakah masih ada nilai yang hilang
print(data_df.isnull().sum())

data_df.head()

"""**Insight:**
- Yang pertama merupakan proses untuk menghapus data dengan nilai yang hilang.
- Yang kedua merupakan proses untuk memeriksa kembali apakah masih ada nilai yang hilang atau tidak.

## Exploratory Data Analysis (EDA)

### Explore ...
"""

# Memilih kolom numerik
numeric_data = data_df.select_dtypes(include='number')
correlation = numeric_data.corr()
print(correlation)

"""**Insight:**
- Ini merupakan proses memilih kolom, bertujuan untuk memastikan data yang digunakan sesuai dengan analisis yang ingin dilakukan. Dengan saya memilih kolom numerik, saya dapat melakukan analisis statistik, mengidentifikasi pola dan hubungan antar variabel, serta mendukung pemodelan dan visualisai data.

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

# Visualisasi matriks korelasi
plt.figure(figsize=(12, 8))
sns.heatmap(correlation, annot=True, fmt=".2f", cmap='coolwarm', square=True)
plt.title('Matriks Korelasi')
plt.show()

"""### Pertanyaan 2:

**Langkah 1:** Analisis Penggunaan Sepeda Berdasarkan Hari dalam Seminggu
"""

# Mengimpor data
df = pd.read_csv('hour.csv')  # Ganti dengan nama file Anda

# Mengonversi kolom tanggal menjadi tipe datetime
df['dteday'] = pd.to_datetime(df['dteday'])

# Menambahkan kolom hari dalam seminggu
df['Day_Of_Week'] = df['dteday'].dt.day_name()

# Menghitung jumlah peminjam sepeda berdasarkan hari dalam seminggu
day_counts = df.groupby('Day_Of_Week')['cnt'].sum().reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])

# Visualisasi
plt.figure(figsize=(8, 5))
day_counts.plot(kind='bar', color='skyblue')
plt.title('Jumlah Peminjam Sepeda per Hari dalam Seminggu')
plt.xlabel('Hari')
plt.ylabel('Jumlah Peminjam')
plt.xticks(rotation=40)
plt.show()

"""**Insight:**
- Merupakan proses menghitung dan memvisualisasikan jumlah peminjam sepeda berdasarkan hari dalam seminggu. Data dikelompokkan berdasarkan hari dan jumlah peminjam dihitung.

**Langkah 2:** Analisis Penggunaan Sepeda Berdasarkan Bulan
"""

# Menambahkan kolom bulan
df['Month'] = df['dteday'].dt.month_name()

# Menghitung jumlah peminjam sepeda berdasarkan bulan
month_counts = df.groupby('Month')['cnt'].sum().reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])

# Visualisasi
plt.figure(figsize=(8, 5))
month_counts.plot(kind='bar', color='lightgreen')
plt.title('Jumlah Peminjam Sepeda per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Peminjam')
plt.xticks(rotation=40)
plt.show()

"""**Insight:**
- Merupakan proses menghitung dan memvisualisasikan jumlah peminjam sepeda berdasarkan bulan. Data dikelompokkan berdasarkan bulan dan jumlah peminjam dihitung.

**Langkah 3:** Analisis Penggunaan Sepeda Berdasarkan Musim
"""

# Menambahkan kolom musim
def get_season(month):
    if month in [12, 1, 2]:
        return 'Winter'
    elif month in [3, 4, 5]:
        return 'Spring'
    elif month in [6, 7, 8]:
        return 'Summer'
    else:
        return 'Fall'

df['Season'] = df['dteday'].dt.month.apply(get_season)

# Menghitung jumlah peminjam sepeda berdasarkan musim
season_counts = df.groupby('Season')['cnt'].sum()

# Visualisasi
plt.figure(figsize=(8, 5))
season_counts.plot(kind='bar', color='salmon')
plt.title('Jumlah Peminjam Sepeda per Musim')
plt.xlabel('Musim')
plt.ylabel('Jumlah Peminjam')
plt.xticks(rotation=0)
plt.show()

"""**Insight:**
- Merupakan proses menghitung dan memvisualisasikan jumlah peminjam sepeda berdasarkan musim. Musim ditentukan berdasarkan bulan, dan jumlah peminjam dihitung untuk setiap musim.

## Analisis Lanjutan (Opsional)

**Langkah 1:** Membuat DataFrame RFM
"""

import pandas as pd

# Mengimpor data
df = pd.read_csv('hour.csv')  # Ganti dengan nama file Anda

# Mengonversi kolom tanggal menjadi tipe datetime
df['dteday'] = pd.to_datetime(df['dteday'])

# Check if 'user_id' or a similar column exists
print(df.columns)  # Print the columns to see available options

# **If 'user_id' doesn't exist, use a relevant column for grouping**
# **For example, if there's a column named 'casual' or 'registered' representing users, use it instead:**
# Assuming 'instant' represents a unique identifier for each record
rfm_df = df.groupby(by="instant", as_index=False).agg({
    "dteday": "max",  # Mengambil tanggal peminjaman terakhir
    "cnt": "count",   # Menghitung jumlah peminjaman # Only keep one aggregation for 'cnt'
    # Remove or comment out the duplicate aggregation for 'cnt':
    # "cnt": "sum"      # Menghitung total peminjaman
})

# Since we removed the 'sum' aggregation for 'cnt',
# the DataFrame will have 3 columns, matching the column names provided:
rfm_df.columns = ["instant", "max_borrow_date", "frequency"]  # change user_id to instant


# Menghitung Recency
recent_date = df['dteday'].max()
rfm_df["recency"] = rfm_df["max_borrow_date"].apply(lambda x: (recent_date - x).days)

# Menghapus kolom max_borrow_date
rfm_df.drop("max_borrow_date", axis=1, inplace=True)

# Menampilkan DataFrame RFM
print(rfm_df.head())

"""**Insight:**
- Prose mengidentifikasi best customer berdasarkan parameter frequency, monetary, dan recancy

**Langkah 2:** Mengidentifikasi Pelanggan Terbaik
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Visualisasi pelanggan terbaik berdasarkan RFM
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))

colors = ["#72BCD4"] * 5  # Warna untuk visualisasi

# Visualisasi berdasarkan Recency
# Use 'instant' instead of 'user_id' for the x-axis, and set hue and legend
sns.barplot(y="recency", x="instant", data=rfm_df.sort_values(by="recency", ascending=True).head(5), hue="instant", palette=colors, dodge=False, ax=ax[0], legend=False)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("By Recency (days)", loc="center", fontsize=18)
ax[0].tick_params(axis='x', labelsize=15)

# Visualisasi berdasarkan Frequency
# Use 'instant' instead of 'user_id' for the x-axis, and set hue and legend
sns.barplot(y="frequency", x="instant", data=rfm_df.sort_values(by="frequency", ascending=False).head(5), hue="instant", palette=colors, dodge=False, ax=ax[1], legend=False)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title("By Frequency", loc="center", fontsize=18)
ax[1].tick_params(axis='x', labelsize=15)

# Calculate 'monetary' value (e.g., total cnt for each instant)
rfm_df['monetary'] = df.groupby('instant')['cnt'].sum().values

# Visualisasi berdasarkan Monetary
# Use 'instant' instead of 'user_id' for the x-axis, and set hue and legend
sns.barplot(y="monetary", x="instant", data=rfm_df.sort_values(by="monetary", ascending=False).head(5), hue="instant", palette=colors, dodge=False, ax=ax[2], legend=False)
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title("By Monetary", loc="center", fontsize=18)
ax[2].tick_params(axis='x', labelsize=15)

plt.suptitle("Best Customers Based on RFM Parameters (instant)", fontsize=20) # Change title to reflect 'instant'
plt.show()

"""**Insight:**
- Dari visualisasi data di atas, dapat dilihat beberapa pelanggan terbaik berdasarkan ketiga parameter tersebut.

## Conclusion

- Conclution pertanyaan 1
Dari analisis yang sudah dilakukan, faktor utama yang mempengaruhi jumlah peminjam sepeda adalah suhu, hari kerja, musim, dan kelembapan. Semakin tinggi suhu, semakin banyak orang yang meminjam sepeda, sementara penggunaan sepeda cenderung lebih tinggi pada akhir pekan dibandingkan dengan hari kerja. Musim panas menunjukkan jumlah peminjam tertinggi, sedangkan musim dingin dan gugur memiliki angka yang lebih rendah. Selain itu, kelembapan yang tinggi cenderung mengurangi jumlah peminjam sepeda.
- Conclution pertanyaan 2
Dari segi pola penggunaan sepeda berdasarkan waktu, penggunaan lebih tinggi terjadi pada hari Sabtu dan Minggu, dengan peningkatan peminjaman yang signifikan di bulan-bulan musim panas dan penurunan di bulan-bulan musim dingin. Musim panas secara keseluruhan menunjukkan penggunaan sepeda yang paling tinggi.
"""

all_df.to_csv("all_data.csv", index=False)

from google.colab import files
files.download("all_data.csv")